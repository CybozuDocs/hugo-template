---
import type { ReplaceParams } from "./types";

interface Props {
  target: string;
  params: ReplaceParams;
}

const { target, params } = Astro.props;

// パラメータ置換処理
let result = target;

// 各パラメータを順番に置換
const replacements = [
  { pattern: /{{<\s*kintone\s*>}}/g, value: params.kintone },
  { pattern: /{{<\s*service\s*>}}/g, value: params.service },
  { pattern: /{{<\s*store\s*>}}/g, value: params.store },
  { pattern: /{{<\s*cybozu_com\s*>}}/g, value: params.cybozu_com },
  { pattern: /{{<\s*slash_help\s*>}}/g, value: params.slash_help },
  { pattern: /{{<\s*slash\s*>}}/g, value: params.slash },
  { pattern: /{{<\s*CorpName\s*>}}/g, value: params.CorpName },
  { pattern: /{{<\s*product\s*>}}/g, value: params.product },
  { pattern: /{{<\s*service_type\s*>}}/g, value: params.service_type },
  { pattern: /{{<\s*help\s*>}}/g, value: params.help },
  { pattern: /{{<\s*product_name\s*>}}/g, value: params.product_name },
  { pattern: /{{<\s*slash_ui\s*>}}/g, value: params.slash_ui },
  {
    pattern: /{{<\s*slash_administrators\s*>}}/g,
    value: params.slash_administrators,
  },
  {
    pattern: /{{<\s*slash_service_name\s*>}}/g,
    value: params.slash_service_name,
  },
];

replacements.forEach(({ pattern, value }) => {
  if (value !== undefined) {
    result = result.replace(pattern, value);
  }
});
---

{result}
