---
import { env } from "@/lib/env";
import Title from './Title.astro';
import type { PageProps, EnvProps } from './types';

interface Props {
  curnode: PageProps;
  target: PageProps;
}

const { curnode, target } = Astro.props;

// Scratch変数の代替
let entries: PageProps[] = [];
let shouldRender = false;
let isSection = false;
let numberOfPages = 0;

if (curnode.isSection) {
  isSection = true;
  
  // pages の計算
  const pages = curnode.isHome 
    ? env.siteHome?.pages?.filter((p: PageProps) => p.sections === "") || []
    : curnode.pages || [];
  
  numberOfPages = (pages.length || 0) + (curnode.sections?.length || 0);
  
  // entries の設定
  if (curnode.sections) {
    entries = [...pages, ...(curnode.sections || [])];
  } else {
    entries = pages;
  }
  
  entries = entries.sort((a, b) => (a.weight || 0) - (b.weight || 0));

  // disabled チェック
  const isDisabled = curnode.params?.disabled?.includes(env.targetRegion);
  shouldRender = !isDisabled;
} else {
  // ページの場合
  isSection = false;
  const isDisabled = curnode.params?.disabled?.includes(env.targetRegion);
  shouldRender = !isDisabled;
}
---

{shouldRender && isSection && (
  <li>
    <div class="category">
      <span class="navi-icon">
        {(curnode.isAncestor?.(target) || curnode === target) ? (
          <i class="fa fa-chevron-down"></i>
        ) : (
          <i class="fa fa-chevron-right"></i>
        )}
      </span>
      {curnode.relPermalink === target.relPermalink ? (
        <a href="#" class={`current${(curnode.isAncestor?.(target) || curnode === target) ? ' expand' : ''}`}>
          <span><Title page={curnode} /></span>
        </a>
      ) : (
        <a href={curnode.relPermalink} class={(curnode.isAncestor?.(target) || curnode === target) ? 'expand' : ''}>
          <span><Title page={curnode} /></span>
        </a>
      )}
    </div>
    {numberOfPages !== 0 && (
      <ul class={(curnode.isAncestor?.(target) || curnode === target) ? 'opened' : ''}>
        {entries.map((entry) => (
          <NavMainMenu curnode={entry} target={target} />
        ))}
      </ul>
    )}
  </li>
)}

{shouldRender && !isSection && (
  <li>
    <span class="navi-sp">
      {curnode.relPermalink === target.relPermalink ? (
        <a href="#" class="current" aria-current="page">
          <Title page={curnode} />
        </a>
      ) : (
        <a href={curnode.relPermalink}>
          <Title page={curnode} />
        </a>
      )}
    </span>
  </li>
)}