---
import SearchBox from './SearchBox.astro';
import LangSelector from './LangSelector.astro';

interface Props {
  env: {
    meganav?: boolean;
    targetRegion: string;
    baseURL: string;
    logo?: string;
    productName: string;
    help: string;
    previewSite?: boolean;
    googleSearch?: boolean;
    bingSearch?: boolean;
    searchAll?: string;
    langSelector?: boolean;
    useWovn?: boolean;
    googleSearchTabs?: string;
    bingSearchTabs?: string;
    languageData?: {
      languages: Array<{
        language_code: string;
        display_name: string;
      }>;
    };
  };
  page: {
    isHome: boolean;
    lang: string;
    // LangSelector用のプロパティ
    siteLanguage?: {
      languageName: string;
    };
    translations?: Array<{
      siteLanguageCode: string;
      siteLanguage: {
        languageName: string;
      };
      relPermalink: string;
    }>;
    relPermalink?: string;
    // 元からあったプロパティ
    allTranslations: any[];
    isTranslated: boolean;
    params: {
      type?: string;
      [key: string]: any;
    };
    scratch?: {
      sitename?: string;
    };
  };
}

const { env, page } = Astro.props;

// ヘッダークラスの決定
let hedclass = "";
if (page.isHome && !env.meganav) {
  hedclass = "home-header";
} else if (page.isHome && env.targetRegion === "US") {
  hedclass = "home-header";
}

// templateVersion=2, product="kintone" で固定

// 言語設定（将来の多言語対応用）
// const langlen = page.allTranslations.length;

// ベースURLの計算（product="kintone"固定のため常に実行）
const urlparts = env.baseURL.split('/');
const productPos = urlparts.length - 2;
const base = `/${urlparts[productPos]}/`;
const baseLink = `${base}${page.lang}/`;

// サーチボックス表示の判定（kintone固定前提で簡素化）
let dispSbox = true;
if (page.params.type === "search_result") {
  dispSbox = false;
} else if (page.isHome) {
  dispSbox = false; // kintone では home で非表示
} else if (env.previewSite) {
  dispSbox = false;
}

// ロゴ/タイトルの決定（kintone固定のため常に画像使用、USリージョンも画像使用）
const logoAlt = `${env.productName} ${env.help}`;

// shouldUseImage が常に true のため logoTitle は不要
// let logoTitle = "";
---

<div id="shield"></div>
<header id="header" class={`header ${hedclass}`}>
  <div id="head" class="header-wrap">
    <div class="logo-wrap">
      {!page.isHome && (
        <button id="tree-switch-mobile" class="tree-switch-mobile">
          <i class="fas fa-bars" aria-hidden="true"></i>
        </button>
      )}
      
      <h1>
        <a class="logo-link" href={baseLink}>
          <img 
            class="logo-img" 
            src={`${base}${env.logo}`} 
            alt={logoAlt} 
            title={logoAlt}
          />
        </a>
      </h1>
    </div>

    {dispSbox && (
      <SearchBox env={env} page={page} />
    )}


    {page.isTranslated && env.langSelector && page.siteLanguage && page.translations && page.relPermalink && (
      <LangSelector 
        env={{
          useWovn: env.useWovn,
          languageData: env.languageData
        }} 
        page={{
          siteLanguage: page.siteLanguage,
          translations: page.translations,
          relPermalink: page.relPermalink
        }} 
      />
    )}
  </div>
</header>