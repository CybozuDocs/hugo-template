---
import { env } from "@/lib/env";
import type { BaseProps } from "./types";

interface Props extends BaseProps {}

const { page } = Astro.props;

const targetRegion = env.targetRegion;

let regions = ["JP", "US", "CN"];
const defLang = "en";

// TODO: productパラメータによる地域制限の復活が必要
// Hugoテンプレートでは以下の分岐が存在していた:
// if eq $product "Garoon"
//   $regions = slice "jp" "cn"
// else if eq $product "store"
//   $regions = slice "us"
// else if eq $product "store-jp"
//   $regions = slice "jp"
// 現在はkintone固定によりこの判定が削除されているが、
// 将来的にstore, store-jpのサポートが必要になった場合は
// この製品別地域制限を復活させる必要がある

if (targetRegion === "US") {
  regions = ["JP", "US"];
} else if (targetRegion === "CN") {
  regions = ["JP", "CN"];
}

const disabled = page.frontmatter.disabled;

// TODO: language_list.jsonの読み込みに切り替える必要があるかも
// import languageListData from '../data/language_list.json';
const languageListData = {
  languages: [
    {
      display_name: "Español",
      language_code: "es",
    },
    {
      display_name: "ไทย",
      language_code: "th",
    },
  ],
} as const;
---

{
  page.allTranslations?.map(
    (translation) =>
      translation.lang === defLang && (
        <link
          rel="alternate"
          href={`https://${env.domain}${translation.relPermalink}`}
          hreflang="x-default"
        />
      ),
  )
}

{
  regions.map((region) => {
    if (disabled.includes(region)) {
      return null;
    }

    const curRegion = region.toLowerCase();
    let domain = "jp.cybozu.help";

    if (curRegion === "us") {
      domain = "get.kintone.help";
    } else if (curRegion === "cn") {
      domain = "help.cybozu.cn";
    }

    return (
      <>
        {page.allTranslations?.map((translation) => {
          let disp = true;
          let thisLang = translation.lang;

          if (thisLang === "zh") {
            thisLang = "zh-Hans";
          } else if (thisLang === "zh-tw") {
            thisLang = "zh-Hant";
          }

          if (curRegion === "cn") {
            if (translation.lang === "zh-tw") {
              disp = false;
            }
          }

          if (disp) {
            const lang = `${thisLang}-${curRegion}`;
            return (
              <link
                rel="alternate"
                href={`https://${domain}${translation.relPermalink}`}
                hreflang={lang}
              />
            );
          }
          return null;
        })}

        {curRegion === "us" &&
          languageListData.languages.map((langItem: any) => {
            const languageCode = langItem.language_code;
            const urlParts = page.relPermalink.split("/");
            let idx = 0;
            let newTarget = "";
            const partsLen = urlParts.length;

            urlParts.forEach((part: string) => {
              if (part !== "") {
                if (idx === 2) {
                  newTarget = `${newTarget}/${languageCode}`;
                  if (partsLen <= 4) {
                    newTarget = `${newTarget}/`
                  }
                } else {
                  newTarget = `${newTarget}/${part}`
                }
              }
              idx++;
            });

            return (
              <link
                rel="alternate"
                href={`https://${domain}${newTarget}`}
                hreflang={languageCode}
              />
            );
          })}
      </>
    );
  })
}
