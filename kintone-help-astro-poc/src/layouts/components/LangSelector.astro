---
import { env } from "@/lib/env";

interface Props {
  relPermalink: string;
}

const { relPermalink } = Astro.props;

// WOVN言語リストの処理
const processWovnLanguages = () => {
  if (!env.useWovn || !env.languageData) return [];

  const urlParts = relPermalink.split("/");

  return env.languageData.languages.map((lang) => {
    const languageCode = lang.language_code;
    let newTarget = "";
    const partsLen = urlParts.length;

    urlParts.forEach((part, idx) => {
      if (part !== "") {
        if (idx === 2) {
          newTarget += `/${languageCode}`;
          if (partsLen <= 4) {
            // 末尾処理はここで完了
          }
        } else {
          newTarget += `/${part}`;
        }
      }
    });

    // URL末尾の調整
    if (!newTarget.endsWith(".html") && !newTarget.endsWith("/")) {
      newTarget += "/";
    }

    return {
      id: `lang_item_${languageCode}`,
      languageCode,
      displayName: lang.display_name,
      destUrl: newTarget,
    };
  });
};

const wovnLanguages = processWovnLanguages();
---

<div id="lang" class="lang-wrap" aria-label="language selector">
  <div>
    <button
      id="lang-selector"
      class="current-lang"
      aria-haspopup="listbox"
      aria-expanded="false"
    >
      <i class="fas fa-globe" aria-hidden="true"></i>
      <span id="displang" class="lang-title"></span>
      <i class="fas fa-chevron-down" aria-hidden="true"></i>
    </button>

    <ul
      id="alter-lang"
      class="alter-lang"
      role="listbox"
      tabindex="-1"
      aria-hidden="true"
    >
      {/* WOVN追加言語 */}
      {
        wovnLanguages.map((lang) => (
          <li
            id={lang.id}
            class="lang-item"
            role="option"
            desturl={lang.destUrl}
          >
            <span class="lang-title">{lang.displayName}</span>
          </li>
        ))
      }
    </ul>
  </div>
</div>
