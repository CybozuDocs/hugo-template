---
import Title from './Title.astro';
import TreeNavMainMenu from './TreeNavMainMenu.astro';
import type { BaseProps } from './types';

interface Props extends BaseProps {
  entries?: any[];
  needtoc?: boolean;
  tocregex?: string;
}

const { env, page, entries: propEntries, needtoc: propNeedtoc, tocregex: propTocregex } = Astro.props;

// 初期設定
let entries = propEntries || env.siteHomeSections || [];
let needtoc = propNeedtoc || false;
let islastsect = false;
let tocregex = propTocregex || "<h[23].*?>(.|\n)*?</h[23]>";
const currentSection = page.currentSection?.sections || "";

// 製品別の最終セクション判定
const getLastPagesByProduct = (product: string) => {
  switch (product) {
    case "Garoon":
      return ["/purpose/", "/user/basic/", "/mobile/", "/user/mobile/", "/user/personal/", "/admin/spec/", "/admin/system/", "/glossary/", "/intro/", "/option/fullsearch/", "/error/"];
    case "Mailwise":
      return ["/user/basic/", "/user/personal/", "/admin/spec/", "/admin/system/", "/option/migration/", "/intro/first/", "/intro/install/", "/intro/verup/", "/intro/uninstall/", "/purpose/"];
    case "Office":
      return ["/intro/first/", "/intro/install/", "/intro/uninstall/", "/option/migration/", "/guide/", "/pdf/", "/error/", "/user/per/"];
    case "Remote":
      return ["/intro/", "/admin/", "/user/"];
    default:
      return [];
  }
};

// TOC設定の判定
if (env.tocInTree) {
  const lastpages = getLastPagesByProduct(env.product);
  
  // 最終セクション判定
  for (const lastpage of lastpages) {
    if (page.relPermalink.includes(lastpage)) {
      islastsect = true;
      break;
    }
  }

  // TOC regex 設定
  if (env.product === "Office" && currentSection === "error") {
    tocregex = "<h2.*?>(.|\n)*?</h2>";
  }

  // TOC 必要性判定
  if (["Garoon", "Mailwise", "Office", "Remote"].includes(env.product)) {
    needtoc = true;
    if (page.relPermalink.includes("/application.html")) {
      needtoc = false;
    }
  }
}

// 階層構造の決定
let link1 = "";
let title1 = page;
let link2 = "";
let title2 = page;
let parenttree = false;

if (env.tocInTree) {
  if (islastsect) {
    link1 = page.parent?.relPermalink || "";
    title1 = page.parent || page;
    parenttree = true;
  } else {
    if (page.firstSection !== page) {
      if (page.parent === page.firstSection) {
        link1 = page.relPermalink;
        title1 = page;
      } else if (page.parent?.parent === page.firstSection) {
        link1 = page.parent?.relPermalink || "";
        title1 = page.parent || page;
        link2 = page.relPermalink;
        title2 = page;
      } else {
        link1 = page.parent?.parent?.relPermalink || "";
        title1 = page.parent?.parent || page;
        link2 = page.parent?.relPermalink || "";
        title2 = page.parent || page;
        parenttree = true;
      }
    }
  }

  // entries の設定
  if (parenttree) {
    entries = [...(page.parent?.pages || []), ...(page.parent?.sections || [])];
  } else {
    entries = [...(page.pages || []), ...(page.sections || [])];
  }
}

// 重み順にソート
entries = entries.sort((a, b) => (a.weight || 0) - (b.weight || 0));
---

<div id="tree-nav">
  {env.templateVersion === "2" && (
    <button id="tree-close-mobile">
      <i class="fas fa-times"></i>
    </button>
  )}
  
  {env.tocInTree && (
    <div id="tree-head">
      <div class="tree-title">
        <a href={link1}>
          <Title page={title1} env={env} />
        </a>
      </div>
      {link2 && (
        <div class="tree-subtitle">
          <a href={link2}>
            <Title page={title2} env={env} />
          </a>
        </div>
      )}
    </div>
  )}

  <nav id="tree-main" class="tree-main" tabindex="0">
    <ul>
      {entries.map((entry) => {
        // プレビューサイトでの表示制御
        let disp = true;
        if (env.previewSite && page.firstSection !== entry) {
          disp = false;
        }
        
        return disp ? (
          <TreeNavMainMenu 
            curnode={entry} 
            target={page} 
            needtoc={needtoc} 
            tocregex={tocregex}
            env={env}
          />
        ) : null;
      })}
    </ul>
  </nav>
</div>