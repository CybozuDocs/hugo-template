---
import { env } from "@/lib/env";
import { menuItems, type MenuItemData } from "../../pages/_data/menuitems";

interface Props {
  lang: string;
  isHome: boolean;
  type: string;
  relPermalink: string;
}

const { lang, isHome, type, relPermalink } = Astro.props;

// メニューデータの取得関数
const getMenuData = (_lang: string, _targetRegion: string) => {
  // IDの配列を生成
  const ids: string[] = menuItems.map((item: MenuItemData) => item.id);
  
  // タイトルの配列を生成
  const titles: string[] = menuItems.map((item: MenuItemData) => item.title);
  
  // URLの配列を生成
  const urls: string[] = menuItems.map((item: MenuItemData) => item.url);
  
  return {
    ids,
    titles,
    urls,
  };
};

// TODO: productパラメータによる分岐処理の復活が必要
// Hugoテンプレートでは以下の分岐が存在していた:
// - product="kintone" => tabnum=1
// - product="slash" => tabnum=2
// - product="store" => tabnum=3
// 現在はkintone固定だが、将来的にslash, storeのサポートが必要になった場合は
// この分岐を復活させる必要がある
const tabnum = 1; // kintone 用のタブ番号（本来はproductによる分岐が必要）
const strtabnum = "1";
let curtab = "";

// メニューデータの取得
const menuData = getMenuData(lang, env.targetRegion);
const menu_ids = ["", ...menuData.ids];
const menu_titles = ["", ...menuData.titles];
const menu_urls = ["", ...menuData.urls];

// 現在のタブの決定
if (
  !isHome &&
  type !== "search_result" &&
  type !== "search_id"
) {
  for (let i = 0; i < menu_ids.length; i++) {
    if (menu_ids[i] === strtabnum && curtab === "") {
      curtab = menu_titles[i];
      break;
    }
  }
}

// ベースURL処理
const baseurl = relPermalink.replace(/\.html$/, "");
const baseparts = baseurl.split("/");
const partslen = baseparts.length;

// メニューアイテムの生成
const generateMenuItems = () => {
  const items = [];
  let menuid = 1;
  let firstitem = true;

  for (let i = 0; i < menu_ids.length; i++) {
    const r = menu_ids[i];
    const strid = menuid.toString();

    if (r === strid) {
      let current = "";
      if (
        !isHome &&
        menuid === tabnum &&
        type !== "search_result" &&
        type !== "search_id"
      ) {
        current = "current";
      }

      const tx = firstitem ? "0" : "-1";

      items.push({
        menuid,
        current,
        tx,
        title: menu_titles[i],
      });

      menuid++;
      firstitem = false;
    }
  }

  return items;
};

// パネルコンテンツの生成
const generatePanelContent = (panelNum: number) => {
  const strid = panelNum.toString();
  const items = [];
  let first = true;

  for (let i = 0; i < menu_ids.length; i++) {
    const r = menu_ids[i];

    if (r === strid) {
      if (!first) {
        let current = "";
        let href = menu_urls[i];
        const menuhref = href.replace(/\.html$/, "");

        if (
          !isHome &&
          partslen >= 3 &&
          (menuhref.includes(baseurl) || baseurl.includes(menuhref))
        ) {
          href = "#";
          current = "current";
        }

        items.push({
          href,
          current,
          title: menu_titles[i],
        });
      }
      first = false;
    }
  }

  return items;
};

const generatedMenuItems = generateMenuItems();
const panelcnt = generatedMenuItems.length;
---

<nav
  class="mega-nav-bar"
  role="navigation"
  aria-label="メニュー"
>
  <ul class="g-nav" role="none"></ul>
  <div id="mega-nav" class="mega-nav">
    <div class="mega-tab-wrap">
      <div id="mega-tab-short" class="mega-tab-short">
        <span class="mega-tab-short-wrap">
          <span id="mega-tab-short-text">{curtab}</span>
          <button
            id="mega-tab-switch"
            class="mega-tab-switch"
            aria-label="タブメニュー"
            aria-controls="mega-tab-bar"
            aria-expanded="false"
          >
            <i
              id="mega-tab-switch-icon"
              class="fas fa-chevron-down mega-tab-switch-icon"
              aria-hidden="true"></i>
          </button>
        </span>
      </div>
      <div id="mega-tab-bar" class="mega-tab-bar">
        <ul role="tablist">
          {
            generatedMenuItems.map((item) => (
              <li id={`menuitem${item.menuid}`} role="presentation">
                <button
                  class={`mega-tab ${item.current}`}
                  id={`tab${item.menuid}`}
                  tabindex={item.tx}
                  role="tab"
                  aria-controls={`panel${item.menuid}`}
                  aria-expanded="false"
                >
                  <span class="mega-tab-text">
                    {item.title}
                    <i class="fas fa-chevron-down" aria-hidden="true" />
                  </span>
                </button>
                <div class="mega-panelplace" />
              </li>
            ))
          }
        </ul>
      </div>
    </div>

    {
      Array.from({ length: panelcnt }, (_, i) => {
        const panelNum = i + 1;
        const tabid = i + 1;
        const panelItems = generatePanelContent(panelNum);

        return (
          <div
            class="mega-panel"
            role="tabpanel"
            id={`panel${panelNum}`}
            aria-labelledby={`tab${tabid}`}
          >
            <ul class="mega-list">
              {panelItems.map((item) => (
                <li class={`mega-list-line ${item.current}`}>
                  <a class="mega-list-item" href={item.href} tabindex="0">
                    {item.title}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        );
      })
    }
  </div>
</nav>
