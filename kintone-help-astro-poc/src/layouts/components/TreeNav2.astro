---
import { env } from "@/lib/env";
import Title from './Title.astro';
import type { BaseProps } from './types';

interface Props extends BaseProps {}

const { page } = Astro.props;

// TOC生成（H2見出しのみ）
const tocregex = "<h2.*?>(.|\n)*?</h2>";
let tocs: string[] = [];

if (page.content) {
  // 簡易的なTOC実装（正規表現による見出し抽出）
  const headingMatches = page.content.match(new RegExp(tocregex, 'g'));
  if (headingMatches) {
    tocs = headingMatches;
  }
}

// TOC項目の処理関数
const processTocItem = (tocItem: string) => {
  // アンカー（id またはpid）の抽出
  let anc = "";
  const params = tocItem.split(" ");

  for (const param of params) {
    if (param.includes("pid=")) {
      const params2 = param.split(">");
      for (const p2 of params2) {
        if (p2.includes("pid=")) {
          anc = p2.replace(/^pid="/, '').replace(/"$/, '');
        }
      }
    } else if (param.includes("id=")) {
      anc = param.replace(/^id="/, '').replace(/"$/, '');
    }
  }

  // テキスト内容の抽出
  const txtMatches = tocItem.match(/>.+</);
  let txt = "";
  if (txtMatches && txtMatches.length > 0) {
    txt = txtMatches[0].replace(/^>/, '').replace(/<$/, '');
  }

  return { anc, txt };
};

// safeHTML の代替（簡易実装）
const safeHTML = (html: string) => html;
---

<div id="tree-nav">
  <div id="tree-head">
    <div class="tree-title">
      <a href={page.relPermalink}>
        <Title page={page} />
      </a>
    </div>
  </div>
  <nav id="tree-main" class="tree-main" role="tree">
    <ul>
      <li class="dummy-node" data-jstree='{ "opened" : true, "disabled" : true }'>
        {tocs.length > 0 && (
          <ul>
            {tocs.map((tocItem) => {
              const { anc, txt } = processTocItem(tocItem);
              return (
                <li>
                  <a href={`${page.relPermalink}#${anc}`} class="toclink" set:html={safeHTML(txt)}></a>
                </li>
              );
            })}
          </ul>
        )}
      </li>
    </ul>
  </nav>
</div>